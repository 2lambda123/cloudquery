// Code generated by codegen; DO NOT EDIT.
package recipes

import "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/storage/armstorage"

func Armstorage() []Table {
	tables := []Table{
		{
      Name: "deleted_account",
      Struct: &armstorage.DeletedAccount{},
      ResponseStruct: &armstorage.DeletedAccountsClientListResponse{},
      Client: &armstorage.DeletedAccountsClient{},
      ListFunc: (&armstorage.DeletedAccountsClient{}).NewListPager,
			NewFunc: armstorage.NewDeletedAccountsClient,
		},
		{
      Name: "local_user",
      Struct: &armstorage.LocalUser{},
      ResponseStruct: &armstorage.LocalUsersClientListResponse{},
      Client: &armstorage.LocalUsersClient{},
      ListFunc: (&armstorage.LocalUsersClient{}).NewListPager,
			NewFunc: armstorage.NewLocalUsersClient,
		},
		{
      Name: "blob_service_properties",
      Struct: &armstorage.BlobServiceProperties{},
      ResponseStruct: &armstorage.BlobServicesClientListResponse{},
      Client: &armstorage.BlobServicesClient{},
      ListFunc: (&armstorage.BlobServicesClient{}).NewListPager,
			NewFunc: armstorage.NewBlobServicesClient,
		},
		{
      Name: "sku_information",
      Struct: &armstorage.SKUInformation{},
      ResponseStruct: &armstorage.SKUsClientListResponse{},
      Client: &armstorage.SKUsClient{},
      ListFunc: (&armstorage.SKUsClient{}).NewListPager,
			NewFunc: armstorage.NewSKUsClient,
		},
		{
      Name: "encryption_scope",
      Struct: &armstorage.EncryptionScope{},
      ResponseStruct: &armstorage.EncryptionScopesClientListResponse{},
      Client: &armstorage.EncryptionScopesClient{},
      ListFunc: (&armstorage.EncryptionScopesClient{}).NewListPager,
			NewFunc: armstorage.NewEncryptionScopesClient,
		},
		{
      Name: "list_container_item",
      Struct: &armstorage.ListContainerItem{},
      ResponseStruct: &armstorage.BlobContainersClientListResponse{},
      Client: &armstorage.BlobContainersClient{},
      ListFunc: (&armstorage.BlobContainersClient{}).NewListPager,
			NewFunc: armstorage.NewBlobContainersClient,
		},
		{
      Name: "file_share_item",
      Struct: &armstorage.FileShareItem{},
      ResponseStruct: &armstorage.FileSharesClientListResponse{},
      Client: &armstorage.FileSharesClient{},
      ListFunc: (&armstorage.FileSharesClient{}).NewListPager,
			NewFunc: armstorage.NewFileSharesClient,
		},
		{
      Name: "object_replication_policy",
      Struct: &armstorage.ObjectReplicationPolicy{},
      ResponseStruct: &armstorage.ObjectReplicationPoliciesClientListResponse{},
      Client: &armstorage.ObjectReplicationPoliciesClient{},
      ListFunc: (&armstorage.ObjectReplicationPoliciesClient{}).NewListPager,
			NewFunc: armstorage.NewObjectReplicationPoliciesClient,
		},
		{
      Name: "private_endpoint_connection",
      Struct: &armstorage.PrivateEndpointConnection{},
      ResponseStruct: &armstorage.PrivateEndpointConnectionsClientListResponse{},
      Client: &armstorage.PrivateEndpointConnectionsClient{},
      ListFunc: (&armstorage.PrivateEndpointConnectionsClient{}).NewListPager,
			NewFunc: armstorage.NewPrivateEndpointConnectionsClient,
		},
		{
      Name: "list_queue",
      Struct: &armstorage.ListQueue{},
      ResponseStruct: &armstorage.QueueClientListResponse{},
      Client: &armstorage.QueueClient{},
      ListFunc: (&armstorage.QueueClient{}).NewListPager,
			NewFunc: armstorage.NewQueueClient,
		},
		{
      Name: "blob_inventory_policy",
      Struct: &armstorage.BlobInventoryPolicy{},
      ResponseStruct: &armstorage.BlobInventoryPoliciesClientListResponse{},
      Client: &armstorage.BlobInventoryPoliciesClient{},
      ListFunc: (&armstorage.BlobInventoryPoliciesClient{}).NewListPager,
			NewFunc: armstorage.NewBlobInventoryPoliciesClient,
		},
		{
      Name: "operation",
      Struct: &armstorage.Operation{},
      ResponseStruct: &armstorage.OperationsClientListResponse{},
      Client: &armstorage.OperationsClient{},
      ListFunc: (&armstorage.OperationsClient{}).NewListPager,
			NewFunc: armstorage.NewOperationsClient,
		},
		{
      Name: "table",
      Struct: &armstorage.Table{},
      ResponseStruct: &armstorage.TableClientListResponse{},
      Client: &armstorage.TableClient{},
      ListFunc: (&armstorage.TableClient{}).NewListPager,
			NewFunc: armstorage.NewTableClient,
		},
		{
      Name: "account",
      Struct: &armstorage.Account{},
      ResponseStruct: &armstorage.AccountsClientListResponse{},
      Client: &armstorage.AccountsClient{},
      ListFunc: (&armstorage.AccountsClient{}).NewListPager,
			NewFunc: armstorage.NewAccountsClient,
		},
	}

	for i := range tables {
		tables[i].Service = "armstorage"
		tables[i].Template = "list"
	}
	return tables
}

func init() {
  Tables = append(Tables, Armstorage()...)
}