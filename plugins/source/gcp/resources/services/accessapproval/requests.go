// Code generated by codegen; DO NOT EDIT.

package accessapproval

import (
	"context"
	"google.golang.org/api/iterator"

	pb "cloud.google.com/go/accessapproval/apiv1/accessapprovalpb"

	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/cloudquery/plugins/source/gcp/client"

	"cloud.google.com/go/accessapproval/apiv1"
)

func Requests() *schema.Table {
	return &schema.Table{
		Name:      "gcp_accessapproval_requests",
		Resolver:  fetchRequests,
		Multiplex: client.ProjectMultiplex,
		Columns: []schema.Column{
			{
				Name:     "project_id",
				Type:     schema.TypeString,
				Resolver: client.ResolveProject,
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "requested_resource_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("RequestedResourceName"),
			},
			{
				Name:     "requested_resource_properties",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("RequestedResourceProperties"),
			},
			{
				Name:     "requested_reason",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("RequestedReason"),
			},
			{
				Name:     "requested_locations",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("RequestedLocations"),
			},
			{
				Name:     "request_time",
				Type:     schema.TypeTimestamp,
				Resolver: client.ResolveProtoTimestamp("RequestTime"),
			},
			{
				Name:     "requested_expiration",
				Type:     schema.TypeTimestamp,
				Resolver: client.ResolveProtoTimestamp("RequestedExpiration"),
			},
		},
	}
}

func fetchRequests(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- interface{}) error {
	c := meta.(*client.Client)
	req := &pb.ListApprovalRequestsMessage{}
	gcpClient, err := accessapproval.NewClient(ctx, c.ClientOptions...)
	if err != nil {
		return err
	}
	it := gcpClient.ListApprovalRequests(ctx, req)
	for {
		resp, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			return err
		}

		res <- resp

	}
	return nil
}
