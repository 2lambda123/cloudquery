// Code generated by codegen; DO NOT EDIT.

package asset

import (
	"context"
	"google.golang.org/api/iterator"

	pb "cloud.google.com/go/asset/apiv1/assetpb"

	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/cloudquery/plugins/source/gcp/client"

	"cloud.google.com/go/asset/apiv1"
)

func Assets() *schema.Table {
	return &schema.Table{
		Name:      "gcp_asset_assets",
		Resolver:  fetchAssets,
		Multiplex: client.ProjectMultiplex,
		Columns: []schema.Column{
			{
				Name:     "project_id",
				Type:     schema.TypeString,
				Resolver: client.ResolveProject,
			},
			{
				Name:     "update_time",
				Type:     schema.TypeTimestamp,
				Resolver: client.ResolveProtoTimestamp("UpdateTime"),
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "asset_type",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("AssetType"),
			},
			{
				Name:     "resource",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Resource"),
			},
			{
				Name:     "iam_policy",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("IamPolicy"),
			},
			{
				Name:     "org_policy",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("OrgPolicy"),
			},
			{
				Name:     "os_inventory",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("OsInventory"),
			},
			{
				Name:     "related_assets",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("RelatedAssets"),
			},
			{
				Name:     "related_asset",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("RelatedAsset"),
			},
			{
				Name:     "ancestors",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("Ancestors"),
			},
		},
	}
}

func fetchAssets(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- interface{}) error {
	c := meta.(*client.Client)
	req := &pb.ListAssetsRequest{}
	gcpClient, err := asset.NewClient(ctx, c.ClientOptions...)
	if err != nil {
		return err
	}
	it := gcpClient.ListAssets(ctx, req, c.CallOptions...)
	for {
		resp, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			return err
		}

		res <- resp

	}
	return nil
}
