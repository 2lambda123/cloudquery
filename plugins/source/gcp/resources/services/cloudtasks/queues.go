// Code generated by codegen; DO NOT EDIT.

package cloudtasks

import (
	"context"
	"google.golang.org/api/iterator"

	pb "cloud.google.com/go/cloudtasks/apiv2/cloudtaskspb"

	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/cloudquery/plugins/source/gcp/client"

	"cloud.google.com/go/cloudtasks/apiv2"
)

func Queues() *schema.Table {
	return &schema.Table{
		Name:      "gcp_cloudtasks_queues",
		Resolver:  fetchQueues,
		Multiplex: client.ProjectMultiplex,
		Columns: []schema.Column{
			{
				Name:     "project_id",
				Type:     schema.TypeString,
				Resolver: client.ResolveProject,
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "app_engine_routing_override",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("AppEngineRoutingOverride"),
			},
			{
				Name:     "rate_limits",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("RateLimits"),
			},
			{
				Name:     "retry_config",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("RetryConfig"),
			},
			{
				Name:     "state",
				Type:     schema.TypeString,
				Resolver: client.ResolveProtoEnum("State"),
			},
			{
				Name:     "purge_time",
				Type:     schema.TypeTimestamp,
				Resolver: client.ResolveProtoTimestamp("PurgeTime"),
			},
			{
				Name:     "stackdriver_logging_config",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("StackdriverLoggingConfig"),
			},
		},
	}
}

func fetchQueues(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- interface{}) error {
	c := meta.(*client.Client)
	req := &pb.ListQueuesRequest{}
	gcpClient, err := cloudtasks.NewClient(ctx, c.ClientOptions...)
	if err != nil {
		return err
	}
	it := gcpClient.ListQueues(ctx, req, c.CallOptions...)
	for {
		resp, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			return err
		}

		res <- resp

	}
	return nil
}
