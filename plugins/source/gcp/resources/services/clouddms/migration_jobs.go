// Code generated by codegen; DO NOT EDIT.

package clouddms

import (
	"context"
	"google.golang.org/api/iterator"

	pb "cloud.google.com/go/clouddms/apiv1/clouddmspb"

	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/cloudquery/plugins/source/gcp/client"

	"cloud.google.com/go/clouddms/apiv1"
)

func MigrationJobs() *schema.Table {
	return &schema.Table{
		Name:      "gcp_clouddms_migration_jobs",
		Resolver:  fetchMigrationJobs,
		Multiplex: client.ProjectMultiplex,
		Columns: []schema.Column{
			{
				Name:     "project_id",
				Type:     schema.TypeString,
				Resolver: client.ResolveProject,
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "create_time",
				Type:     schema.TypeTimestamp,
				Resolver: client.ResolveProtoTimestamp("CreateTime"),
			},
			{
				Name:     "update_time",
				Type:     schema.TypeTimestamp,
				Resolver: client.ResolveProtoTimestamp("UpdateTime"),
			},
			{
				Name:     "labels",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Labels"),
			},
			{
				Name:     "display_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("DisplayName"),
			},
			{
				Name:     "state",
				Type:     schema.TypeString,
				Resolver: client.ResolveProtoEnum("State"),
			},
			{
				Name:     "phase",
				Type:     schema.TypeString,
				Resolver: client.ResolveProtoEnum("Phase"),
			},
			{
				Name:     "type",
				Type:     schema.TypeString,
				Resolver: client.ResolveProtoEnum("Type"),
			},
			{
				Name:     "dump_path",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("DumpPath"),
			},
			{
				Name:     "source",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Source"),
			},
			{
				Name:     "destination",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Destination"),
			},
			{
				Name:     "duration",
				Type:     schema.TypeInt,
				Resolver: client.ResolveProtoDuration("Duration"),
			},
			{
				Name:     "error",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Error"),
			},
			{
				Name:     "source_database",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("SourceDatabase"),
			},
			{
				Name:     "destination_database",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("DestinationDatabase"),
			},
			{
				Name:     "end_time",
				Type:     schema.TypeTimestamp,
				Resolver: client.ResolveProtoTimestamp("EndTime"),
			},
		},
	}
}

func fetchMigrationJobs(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- interface{}) error {
	c := meta.(*client.Client)
	req := &pb.ListMigrationJobsRequest{}
	gcpClient, err := clouddms.NewDataMigrationClient(ctx, c.ClientOptions...)
	if err != nil {
		return err
	}
	it := gcpClient.ListMigrationJobs(ctx, req, c.CallOptions...)
	for {
		resp, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			return err
		}

		res <- resp

	}
	return nil
}
