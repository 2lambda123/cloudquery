// Code generated by codegen; DO NOT EDIT.

package assuredworkloads

import (
	"context"
	"google.golang.org/api/iterator"

	pb "cloud.google.com/go/assuredworkloads/apiv1/assuredworkloadspb"

	"github.com/cloudquery/plugin-sdk/schema"
	"github.com/cloudquery/plugins/source/gcp/client"

	"cloud.google.com/go/assuredworkloads/apiv1"
)

func Workloads() *schema.Table {
	return &schema.Table{
		Name:      "gcp_assuredworkloads_workloads",
		Resolver:  fetchWorkloads,
		Multiplex: client.ProjectMultiplex,
		Columns: []schema.Column{
			{
				Name:     "project_id",
				Type:     schema.TypeString,
				Resolver: client.ResolveProject,
			},
			{
				Name:     "name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Name"),
			},
			{
				Name:     "display_name",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("DisplayName"),
			},
			{
				Name:     "resources",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Resources"),
			},
			{
				Name:     "compliance_regime",
				Type:     schema.TypeString,
				Resolver: client.ResolveProtoEnum("ComplianceRegime"),
			},
			{
				Name:     "create_time",
				Type:     schema.TypeTimestamp,
				Resolver: client.ResolveProtoTimestamp("CreateTime"),
			},
			{
				Name:     "billing_account",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("BillingAccount"),
			},
			{
				Name:     "etag",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("Etag"),
			},
			{
				Name:     "labels",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("Labels"),
			},
			{
				Name:     "provisioned_resources_parent",
				Type:     schema.TypeString,
				Resolver: schema.PathResolver("ProvisionedResourcesParent"),
			},
			{
				Name:     "kms_settings",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("KmsSettings"),
			},
			{
				Name:     "resource_settings",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("ResourceSettings"),
			},
			{
				Name:     "kaj_enrollment_state",
				Type:     schema.TypeString,
				Resolver: client.ResolveProtoEnum("KajEnrollmentState"),
			},
			{
				Name:     "enable_sovereign_controls",
				Type:     schema.TypeBool,
				Resolver: schema.PathResolver("EnableSovereignControls"),
			},
			{
				Name:     "saa_enrollment_response",
				Type:     schema.TypeJSON,
				Resolver: schema.PathResolver("SaaEnrollmentResponse"),
			},
			{
				Name:     "compliant_but_disallowed_services",
				Type:     schema.TypeStringArray,
				Resolver: schema.PathResolver("CompliantButDisallowedServices"),
			},
			{
				Name:     "partner",
				Type:     schema.TypeString,
				Resolver: client.ResolveProtoEnum("Partner"),
			},
		},
	}
}

func fetchWorkloads(ctx context.Context, meta schema.ClientMeta, parent *schema.Resource, res chan<- interface{}) error {
	c := meta.(*client.Client)
	req := &pb.ListWorkloadsRequest{}
	gcpClient, err := assuredworkloads.NewClient(ctx, c.ClientOptions...)
	if err != nil {
		return err
	}
	it := gcpClient.ListWorkloads(ctx, req, c.CallOptions...)
	for {
		resp, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			return err
		}

		res <- resp

	}
	return nil
}
